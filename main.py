import logging
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import BotCommand
from handlers import (
    start, help_command, new_reminder, list_active_reminders, list_all_reminders,
    button_callback, handle_text_input, check_owner
)
from database.db import init_db, get_active_reminders, update_last_reminded, cleanup_old_reminders
from config import TELEGRAM_TOKEN, validate_config
from datetime import datetime, time

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def setup_commands(application: Application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("new", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand("list_active", "–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("list_all", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands)

async def check_reminders(context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%Y-%m-%d")
    weekday = str(now.isoweekday())
    
    logging.info(f"Checking reminders at {current_time}")
    
    try:
        reminders = get_active_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return
        
    for reminder in reminders:
        reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
        
        logging.info(f"Checking reminder {reminder_id}: time={time}, current_time={current_time}")
        
        if time != current_time:
            continue
            
        should_remind = False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        should_remind = {
            'daily': True,
            'weekly': bool(days_of_week and weekday in days_of_week.split(',')),
            'monthly': current_date[8:] == date[8:],
            'yearly': current_date[5:] == date[5:],
            'once': current_date == date
        }.get(reminder_type, False)
        
        logging.info(f"Should remind: {should_remind}, last_reminded: {last_reminded}")
        
        if should_remind and last_reminded != current_date:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}",
                    parse_mode='HTML'
                )
                update_last_reminded(reminder_id) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                logging.info(f"Reminder {reminder_id} sent successfully")
            except Exception as e:
                logging.error(f"Failed to send reminder: {e}")

async def cleanup_job(context):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        cleanup_old_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        application.job_queue.run_once(setup_commands, when=1, data=application)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
        application.add_handler(CommandHandler("start", check_owner(start)))
        application.add_handler(CommandHandler("help", check_owner(help_command)))
        application.add_handler(CommandHandler("new", check_owner(new_reminder)))
        application.add_handler(CommandHandler("list_active", check_owner(list_active_reminders)))
        application.add_handler(CommandHandler("list_all", check_owner(list_all_reminders)))
        application.add_handler(CallbackQueryHandler(check_owner(button_callback)))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_owner(handle_text_input)))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ job_queue
        job_queue = application.job_queue
        job_queue.run_repeating(check_reminders, interval=60, first=1)
        job_queue.run_daily(cleanup_job, time=time(hour=0, minute=0))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
        
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return

if __name__ == '__main__':
    main() 