import logging
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram import BotCommand
from handlers import (
    start, help_command, new_reminder, list_active_reminders, list_all_reminders,
    button_callback, handle_text_input, check_owner, get_statistics
)
from database.db import init_db, get_active_reminders, update_last_reminded, cleanup_old_reminders, get_weekly_reminders
from config import TELEGRAM_TOKEN, OWNER_ID, validate_config
from datetime import datetime, time, timedelta

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç httpx
logging.getLogger('httpx').setLevel(logging.WARNING)

async def setup_commands(application: Application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("new", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand("list_active", "–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("list_all", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands)

async def check_reminders(context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%Y-%m-%d")
    weekday = str(now.isoweekday())
    
    logging.info(f"Checking reminders at {current_time}")
    
    try:
        reminders = get_active_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return
        
    for reminder in reminders:
        reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
        
        logging.info(f"Checking reminder {reminder_id}: time={time}, current_time={current_time}")
        
        if time != current_time:
            continue
            
        should_remind = False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        should_remind = {
            'daily': True,
            'weekly': bool(days_of_week is not None and weekday in (days_of_week.split(',') if days_of_week else [])),
            'monthly': bool(date is not None and current_date[8:] == date[8:]),
            'yearly': bool(date is not None and current_date[5:] == date[5:]), 
            'once': bool(date is not None and current_date == date)
        }.get(reminder_type, False)
        
        logging.info(f"Should remind: {should_remind}, last_reminded: {last_reminded}")
        
        if should_remind and last_reminded != current_date:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:*\n\n{text}",
                    parse_mode='Markdown'
                )
                update_last_reminded(reminder_id) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                logging.info(f"Reminder {reminder_id} sent successfully")
            except Exception as e:
                logging.error(f"Failed to send reminder: {e}")

async def cleanup_job(context):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        cleanup_old_reminders()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {e}")

async def send_weekly_summary(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–∑–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
    now = datetime.now()
    print("Checking weekly summary")
    if now.weekday() != 6:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return
        
    try:
        reminders = get_weekly_reminders()
        if not reminders:
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        next_week_start = (now + timedelta(days=1)).date()
        next_week_end = (now + timedelta(days=7)).date()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        summary = "üìÖ *–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:*\n"
        summary += f"*{next_week_start.strftime('%d.%m')} - {next_week_end.strftime('%d.%m')}*\n\n"
        
        type_headers = {
            'daily': 'üîÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ:*',
            'weekly': 'üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ:*',
            'monthly': 'üìÜ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ:*',
            'yearly': 'üóì *–ï–∂–µ–≥–æ–¥–Ω—ã–µ:*',
            'once': 'üìå *–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ:*'
        }
        
        grouped_reminders = {}
        for reminder in reminders:
            r_type = reminder[3]  # reminder_type
            r_date = reminder[6]  # date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
            should_include = False
            
            if r_type == 'daily':
                should_include = True
            elif r_type == 'weekly':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
                days = reminder[4].split(',')  # days_of_week
                should_include = bool(days)
            elif r_type == 'monthly':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
                if r_date:
                    r_day = int(r_date[8:10])
                    for d in range(8):
                        check_date = next_week_start + timedelta(days=d)
                        if check_date.day == r_day:
                            should_include = True
                            break
            elif r_type == 'yearly' and r_date:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
                r_date = datetime.strptime(r_date, '%Y-%m-%d').date()
                next_occurrence = r_date.replace(year=now.year)
                if next_occurrence < now.date():
                    next_occurrence = next_occurrence.replace(year=now.year + 1)
                should_include = next_week_start <= next_occurrence <= next_week_end
            elif r_type == 'once' and r_date:
                # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
                r_date = datetime.strptime(r_date, '%Y-%m-%d').date()
                should_include = next_week_start <= r_date <= next_week_end
            
            if should_include:
                if r_type not in grouped_reminders:
                    grouped_reminders[r_type] = []
                grouped_reminders[r_type].append(reminder)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not grouped_reminders:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for r_type, reminders in grouped_reminders.items():
            if reminders:
                summary += f"\n{type_headers.get(r_type, 'üìù *–î—Ä—É–≥–∏–µ:*')}\n"
                for reminder in reminders:
                    text = reminder[2]  # text
                    time = reminder[5]  # time
                    date = reminder[6]  # date
                    
                    if r_type == 'weekly':
                        days = reminder[4].split(',')  # days_of_week
                        days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                        days = [days_text[int(d)-1] for d in days]
                        summary += f"‚Ä¢ {text} ‚è∞ {time} ({', '.join(days)})\n"
                    elif r_type in ['monthly', 'yearly', 'once'] and date:
                        date_obj = datetime.strptime(date, '%Y-%m-%d').date()
                        date_str = date_obj.strftime('%d.%m')
                        summary += f"‚Ä¢ {text} ‚è∞ {time} üìÖ {date_str}\n"
                    else:
                        summary += f"‚Ä¢ {text} ‚è∞ {time}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=summary,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        application.job_queue.run_once(setup_commands, when=1, data=application)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
        application.add_handler(CommandHandler("start", check_owner(start)))
        application.add_handler(CommandHandler("help", check_owner(help_command)))
        application.add_handler(CommandHandler("new", check_owner(new_reminder)))
        application.add_handler(CommandHandler("list_active", check_owner(list_active_reminders)))
        application.add_handler(CommandHandler("list_all", check_owner(list_all_reminders)))
        application.add_handler(CommandHandler("statistics", check_owner(get_statistics)))
        application.add_handler(CallbackQueryHandler(check_owner(button_callback)))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_owner(handle_text_input)))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ job_queue
        job_queue = application.job_queue
        job_queue.run_repeating(check_reminders, interval=60, first=1) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        job_queue.run_daily(cleanup_job, time=time(hour=0, minute=0)) # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤ 00:00
        job_queue.run_daily(send_weekly_summary, time=time(hour=6, minute=15),  days=(0,))    # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 9:00
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
        
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return

if __name__ == '__main__':
    main() 