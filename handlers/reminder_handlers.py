from telegram import Update
from telegram.ext import ContextTypes
from database.db import get_all_reminders, get_active_reminders, get_reminders_statistics
from keyboards.inline_keyboards import get_reminder_type_keyboard, get_reminder_management_keyboard
from .utils import delete_message

async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    context.user_data.clear()
    await update.message.delete()
    
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_reminder_type_keyboard()
    )
    context.user_data['last_bot_message'] = message.message_id

async def list_active_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    reminders = get_active_reminders()
    
    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for reminder in reminders:
        reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
        reminder_text = format_reminder_text(reminder)
        
        await update.message.reply_text(
            reminder_text,
            reply_markup=get_reminder_management_keyboard(reminder_id, is_active)
        )
        
async def list_all_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    reminders = get_all_reminders(update.effective_user.id)
    
    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for reminder in reminders:
        reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
        reminder_text = format_reminder_text(reminder)
        
        await update.message.reply_text(
            reminder_text,
            reply_markup=get_reminder_management_keyboard(reminder_id, is_active)
        )

def format_reminder_text(reminder):
    '''–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
    type_mapping = {
        'daily': ('üîÅ', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        'weekly': ('üìÖ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'), 
        'monthly': ('üìÜ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'),
        'yearly': ('üóì', '–ï–∂–µ–≥–æ–¥–Ω–æ'),
        'once': ('üìå', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ')
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status = "üîî –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "üîï –û—Ç–∫–ª—é—á–µ–Ω–æ"
    reminder_text = f"ID: {reminder_id}\n üìù {text}\n‚è∞ {time}\n{status}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    emoji, type_text = type_mapping.get(reminder_type, ('üìå', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if reminder_type == 'weekly' and days_of_week:
        days = days_of_week.split(',')
        days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        selected_days = [days_text[int(d)-1] for d in days]
        reminder_text += f"{emoji} {type_text} ({', '.join(selected_days)})"
    elif reminder_type in ['monthly', 'yearly', 'once'] and date:
        reminder_text += f"{emoji} {type_text} ({date})"
    else:
        reminder_text += f"{emoji} {type_text}"
    
    return reminder_text

async def get_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    stats = get_reminders_statistics()
    
    text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n\n"
    text += f"–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total']}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n\n"
    
    text += "*–ü–æ —Ç–∏–ø–∞–º:*\n"
    for r_type, count in stats['by_type'].items():
        emoji = {
            'daily': 'üîÅ',
            'weekly': 'üìÖ',
            'monthly': 'üìÜ',
            'yearly': 'üóì',
            'once': 'üìå'
        }.get(r_type, 'üìù')
        text += f"{emoji} {r_type}: {count}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')