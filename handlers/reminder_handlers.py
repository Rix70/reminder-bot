from telegram import Update
from telegram.ext import ContextTypes
from database.db import get_all_reminders, get_active_reminders, get_reminders_statistics, get_weekly_reminders
from keyboards.inline_keyboards import get_reminder_type_keyboard, get_reminder_management_keyboard, get_pagination_keyboard
from .utils import delete_message
from datetime import datetime, timedelta
import logging

async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    context.user_data.clear()
    await update.message.delete()
    
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_reminder_type_keyboard()
    )
    context.user_data['last_bot_message'] = message.message_id

async def list_active_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    reminders = get_active_reminders()
    await show_reminders_page(update, context, reminders, 1, "–∞–∫—Ç–∏–≤–Ω—ã—Ö")

async def list_all_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    reminders = get_all_reminders(update.effective_user.id)
    await show_reminders_page(update, context, reminders, 1, "–≤—Å–µ—Ö")

async def show_reminders_page(update: Update, context: ContextTypes.DEFAULT_TYPE, reminders, page: int, reminder_type: str):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏'''
    if not reminders:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç {reminder_type} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_reminders'] = reminders
    total_pages = len(reminders)
    page = min(max(1, page), total_pages)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder = reminders[page-1]
    reminder_text = format_reminder_text(reminder)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(update, Update):
        send_method = update.message.reply_text
    else:
        # –î–ª—è callback query –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
        send_method = update.edit_message_text
    
    await send_method(
        reminder_text,
        reply_markup=get_pagination_keyboard(page, total_pages, reminder[0], reminder[7])
    )

def format_reminder_text(reminder):
    '''–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
    type_mapping = {
        'daily': ('üîÅ', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'),
        'weekly': ('üìÖ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'), 
        'monthly': ('üìÜ', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'),
        'yearly': ('üóì', '–ï–∂–µ–≥–æ–¥–Ω–æ'),
        'birthday': ('üéÇ', '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'),
        'once': ('üìå', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ')
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status = "üîî –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "üîï –û—Ç–∫–ª—é—á–µ–Ω–æ"
    reminder_text = f"ID: {reminder_id}\n üìù {text}\n‚è∞ {time}\n{status}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    emoji, type_text = type_mapping.get(reminder_type, ('üìå', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if reminder_type == 'weekly' and days_of_week:
        days = days_of_week.split(',')
        days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        selected_days = [days_text[int(d)-1] for d in days]
        reminder_text += f"{emoji} {type_text} ({', '.join(selected_days)})"
    elif reminder_type == 'birthday' and date:
        birth_date = datetime.strptime(date, '%Y-%m-%d')
        today = datetime.now()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        next_birthday = birth_date.replace(year=today.year)
        if next_birthday < today:
            next_birthday = next_birthday.replace(year=today.year + 1)
        reminder_text += f"{emoji} {type_text} ({date}) - {age} –ª–µ—Ç"
    elif reminder_type in ['monthly', 'yearly', 'once', 'birthday'] and date:
        reminder_text += f"{emoji} {type_text} ({date})"
    else:
        reminder_text += f"{emoji} {type_text}"
    
    return reminder_text

async def get_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    '''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'''
    stats = get_reminders_statistics()
    
    text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n\n"
    text += f"–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total']}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n\n"
    
    text += "*–ü–æ —Ç–∏–ø–∞–º:*\n"
    for r_type, count in stats['by_type'].items():
        emoji = {
            'daily': 'üîÅ',
            'weekly': 'üìÖ',
            'monthly': 'üìÜ',
            'yearly': 'üóì',
            'once': 'üìå',
            'birthday': 'üéÇ'
        }.get(r_type, 'üìù')
        text += f"{emoji} {r_type}: {count}\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def send_weekly_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–∑–æ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
    try:
        reminders = get_weekly_reminders()
        if not reminders:
            await update.message.reply_text("–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        next_week_start = (now + timedelta(days=1)).date()
        next_week_end = (now + timedelta(days=7)).date()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        summary = "üìÖ *–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:*\n"
        summary += f"*{next_week_start.strftime('%d.%m')} - {next_week_end.strftime('%d.%m')}*\n\n"
        
        type_headers = {
            'daily': 'üîÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ:*',
            'weekly': 'üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ:*',
            'monthly': 'üìÜ *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ:*',
            'yearly': 'üóì *–ï–∂–µ–≥–æ–¥–Ω—ã–µ:*',
            'birthday': 'üéÇ *–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:*',
            'once': 'üìå *–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ:*'
        }
        
        grouped_reminders = {}
        for reminder in reminders:
            r_type = reminder[3]  # reminder_type
            if r_type not in grouped_reminders:
                grouped_reminders[r_type] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
            should_include = False
            
            if r_type == 'daily':
                should_include = True
            elif r_type == 'weekly':
                days = reminder[4].split(',') if reminder[4] else []
                should_include = bool(days)
            elif r_type == 'birthday' and reminder[6]:  # date
                birth_date = datetime.strptime(reminder[6], '%Y-%m-%d').date()
                next_birthday = birth_date.replace(year=now.year)
                if next_birthday < now.date():
                    next_birthday = next_birthday.replace(year=now.year + 1)
                should_include = next_week_start <= next_birthday <= next_week_end
            elif reminder[6]:  # date –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                event_date = datetime.strptime(reminder[6], '%Y-%m-%d').date()
                if r_type == 'monthly':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
                    for d in range(8):
                        check_date = next_week_start + timedelta(days=d)
                        if check_date.day == event_date.day:
                            should_include = True
                            break
                elif r_type == 'yearly':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ (–±–µ–∑ –≥–æ–¥–∞) –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
                    event_date = event_date.replace(year=now.year)
                    if event_date < now.date():
                        event_date = event_date.replace(year=now.year + 1)
                    should_include = next_week_start <= event_date <= next_week_end
                elif r_type == 'once':
                    should_include = next_week_start <= event_date <= next_week_end
            
            if should_include:
                grouped_reminders[r_type].append(reminder)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for r_type, type_reminders in grouped_reminders.items():
            if type_reminders:
                summary += f"\n{type_headers.get(r_type, 'üìù *–î—Ä—É–≥–∏–µ:*')}\n"
                for reminder in type_reminders:
                    text = reminder[2]  # text
                    time = reminder[5]  # time
                    date = reminder[6]  # date
                    days_of_week = reminder[4]  # days_of_week
                    
                    if r_type == 'birthday' and date:
                        birth_date = datetime.strptime(date, '%Y-%m-%d').date()
                        age = now.year - birth_date.year
                        if (now.month, now.day) < (birth_date.month, birth_date.day):
                            age -= 1
                        next_birthday = birth_date.replace(year=now.year)
                        if next_birthday < now.date():
                            next_birthday = next_birthday.replace(year=now.year + 1)
                            age += 1
                        date_str = next_birthday.strftime('%d.%m')
                        summary += f"‚Ä¢ {text} ‚è∞ {time} üìÖ {date_str} üéÇ {age} –ª–µ—Ç\n"
                    elif r_type == 'weekly' and days_of_week:
                        days = days_of_week.split(',')
                        days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                        days = [days_text[int(d)-1] for d in days]
                        summary += f"‚Ä¢ {text} ‚è∞ {time} ({', '.join(days)})\n"
                    elif date:
                        date_obj = datetime.strptime(date, '%Y-%m-%d').date()
                        date_str = date_obj.strftime('%d.%m')
                        summary += f"‚Ä¢ {text} ‚è∞ {time} üìÖ {date_str}\n"
                    else:
                        summary += f"‚Ä¢ {text} ‚è∞ {time}\n"
        
        await update.message.reply_text(
            summary,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–∑–æ—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")