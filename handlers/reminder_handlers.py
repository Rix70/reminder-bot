from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
from database.db import (
    add_reminder, get_user_reminders, delete_reminder, 
    get_reminder_by_id, update_reminder, toggle_reminder
)
from keyboards.inline_keyboards import get_reminder_type_keyboard, get_weekdays_keyboard, get_reminder_management_keyboard
from keyboards.reply_keyboards import get_main_keyboard
from telegram.error import BadRequest

async def delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except BadRequest:
        pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/new –∏–ª–∏ üìù –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/list –∏–ª–∏ üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/help –∏–ª–∏ ‚ÑπÔ∏è –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "*–¢–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ - –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ - –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω—ã–µ - –∫–∞–∂–¥—ã–π –≥–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n\n"
        "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
# –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_reminder_type_keyboard()
    )
    context.user_data['last_bot_message'] = message.message_id

def validate_date(date_str):
    try:
        date = datetime.strptime(date_str, '%d.%m.%Y')
        current_date = datetime.now()
        
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
        current_date = current_date.replace(hour=0, minute=0, second=0, microsecond=0)
        date = date.replace(hour=0, minute=0, second=0, microsecond=0)
        
        if date < current_date:
            return False, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!"
        return True, date.strftime('%Y-%m-%d')
    except ValueError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = get_user_reminders(update.effective_user.id)
    
    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for reminder in reminders:
        reminder_id, user_id, text, reminder_type, days_of_week, time, date, is_active, last_reminded = reminder
        
        status = "üîî –ê–∫—Ç–∏–≤–Ω–æ" if is_active else "üîï –û—Ç–∫–ª—é—á–µ–Ω–æ"
        reminder_text = f"üìù {text}\n‚è∞ {time}\n{status}\n"
        
        if reminder_type == 'daily':
            reminder_text += "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif reminder_type == 'weekly':
            days = days_of_week.split(',')
            days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            selected_days = [days_text[int(d)-1] for d in days]
            reminder_text += f"üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ({', '.join(selected_days)})"
        elif reminder_type == 'monthly':
            reminder_text += f"üîÑ –ï–∂–µ–º–µ—Å—è—á–Ω–æ ({date})"
        elif reminder_type == 'yearly':
            reminder_text += f"üîÑ –ï–∂–µ–≥–æ–¥–Ω–æ ({date})"
        else:
            reminder_text += f"üìÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ ({date})"
        
        await update.message.reply_text(
            reminder_text,
            reply_markup=get_reminder_management_keyboard(reminder_id, is_active)
        )

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if text == "üìù –ù–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await new_reminder(update, context)
        return
    elif text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await list_reminders(update, context)
        return
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'last_bot_message' in context.user_data:
        await delete_message(context, update.effective_chat.id, context.user_data['last_bot_message'])

    if 'editing_reminder' in context.user_data:
        reminder_id = context.user_data['editing_reminder']
        edit_type = context.user_data['edit_type']
        
        if edit_type == 'text':
            update_reminder(reminder_id, text=update.message.text)
            message = await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
            context.user_data['last_bot_message'] = message.message_id
        
        context.user_data.clear()
        await update.message.delete()
        await list_reminders(update, context)
        return

    if 'waiting_for' not in context.user_data:
        return
# –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.delete()

    if context.user_data['waiting_for'] == 'text':
        context.user_data['text'] = update.message.text
        
        if context.user_data['reminder_type'] == 'weekly':
            message = await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
                reply_markup=get_weekdays_keyboard()
            )
        elif context.user_data['reminder_type'] in ['monthly', 'yearly', 'once']:
            message = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            context.user_data['waiting_for'] = 'date'
        else:  # daily
            message = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            context.user_data['waiting_for'] = 'time'
        context.user_data['last_bot_message'] = message.message_id
    
    elif context.user_data['waiting_for'] == 'date':
        is_valid, result = validate_date(update.message.text)
        if not is_valid:
            message = await update.message.reply_text(f"‚ùå {result}")
            context.user_data['last_bot_message'] = message.message_id
            return
        
        context.user_data['date'] = result
        message = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        context.user_data['last_bot_message'] = message.message_id
        context.user_data['waiting_for'] = 'time'
    
    elif context.user_data['waiting_for'] == 'time':
        try:
            time = datetime.strptime(update.message.text, '%H:%M')
            context.user_data['time'] = time.strftime('%H:%M')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_id = add_reminder(
                user_id=update.effective_user.id,
                text=context.user_data['text'],
                reminder_type=context.user_data['reminder_type'],
                days_of_week=','.join(context.user_data.get('selected_days', [])),
                time=context.user_data['time'],
                date=context.user_data.get('date')
            )
            
            message = await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            context.user_data['last_bot_message'] = message.message_id
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            context.job_queue.run_once(
                lambda ctx: delete_message(context, update.effective_chat.id, message.message_id),
                3
            )
            
            context.user_data.clear()
        except ValueError:
            message = await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú):")
            context.user_data['last_bot_message'] = message.message_id

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("type_"):
        reminder_type = query.data.split("_")[1]
        context.user_data['reminder_type'] = reminder_type
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        context.user_data['waiting_for'] = 'text'
        context.user_data['last_bot_message'] = query.message.message_id
    
    elif query.data.startswith("edit_"):
        _, edit_type, reminder_id = query.data.split("_")
        reminder = get_reminder_by_id(int(reminder_id))
        
        if not reminder:
            await query.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        context.user_data['editing_reminder'] = int(reminder_id)
        context.user_data['edit_type'] = edit_type
        
        if edit_type == 'text':
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        elif edit_type == 'time':
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        elif edit_type == 'date':
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        context.user_data['last_bot_message'] = query.message.message_id
    elif query.data.startswith("toggle_"):
        reminder_id = int(query.data.split("_")[1])
        new_status = toggle_reminder(reminder_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        await query.message.edit_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {status_text}!",
            reply_markup=get_reminder_management_keyboard(reminder_id, new_status)
        )

    elif query.data.startswith("day_"):
        if 'selected_days' not in context.user_data:
            context.user_data['selected_days'] = []
        
        day = query.data.split("_")[1]
        if day in context.user_data['selected_days']:
            context.user_data['selected_days'].remove(day)
        else:
            context.user_data['selected_days'].append(day)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
        days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        selected = [days_text[int(d)-1] for d in context.user_data['selected_days']]
        await query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {', '.join(selected) if selected else '–Ω–µ—Ç'}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_weekdays_keyboard()
        )
        context.user_data['last_bot_message'] = query.message.message_id
    
    elif query.data == "days_done":
        if not context.user_data.get('selected_days'):
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
            return
        
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        context.user_data['waiting_for'] = 'time'
    
    elif query.data.startswith("delete_"):
        reminder_id = int(query.data.split("_")[1])
        delete_reminder(reminder_id)
        await query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")