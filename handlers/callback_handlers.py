from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.db import get_reminder_by_id, toggle_reminder, delete_reminder
from keyboards.inline_keyboards import get_weekdays_keyboard, get_reminder_management_keyboard, get_reminder_type_keyboard
import logging

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    handlers = {
        'type_': handle_type_callback,
        'edit_': handle_edit_callback,
        'toggle_': handle_toggle_callback,
        'day_': handle_day_callback,
        'days_done': handle_days_done_callback,
        'delete_': handle_delete_callback,
        'cancel_': handle_cancel_callback,
        'page_': handle_page_callback,
        'create_reminder_': handle_create_reminder_callback
    }
    
    for prefix, handler in handlers.items():
        if query.data.startswith(prefix):
            await handler(query, context)
            break

async def handle_type_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    reminder_type = query.data.split("_")[1]
    context.user_data['reminder_type'] = reminder_type
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if 'text' in context.user_data:
        if reminder_type == 'weekly':
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:",
                reply_markup=get_weekdays_keyboard()
            )
        else:
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            context.user_data['waiting_for'] = 'time'
    else:
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        context.user_data['waiting_for'] = 'text'
    
    context.user_data['last_bot_message'] = query.message.message_id

async def handle_edit_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    _, edit_type, reminder_id = query.data.split("_")
    reminder = get_reminder_by_id(int(reminder_id))

    if not reminder:
        await query.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data['editing_reminder'] = int(reminder_id)
    context.user_data['edit_type'] = edit_type
    
    messages = {
        'text': f"\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: _{reminder[2]}_ \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        'time': f"\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: _{reminder[5]}_ \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
        'date': f"\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: _{reminder[6]}_ \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    }
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{reminder_id}")]]
    
    await query.message.edit_text(
        messages.get(edit_type, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"), 
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_bot_message'] = query.message.message_id

async def handle_toggle_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'''
    from .reminder_handlers import format_reminder_text

    try:
        reminder_id = int(query.data.split("_")[1])
        
        new_status = toggle_reminder(reminder_id)
        reminder = get_reminder_by_id(reminder_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–æ üîï"
        text = f"*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {status_text}*\n\n{format_reminder_text(reminder)}"
        
        await query.message.edit_text(
            text,
            parse_mode='Markdown',
            reply_markup=get_reminder_management_keyboard(reminder_id, new_status)
        )
        
    except (ValueError, IndexError):
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–∞–Ω–Ω—ã—Ö: {query.data}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_toggle_callback: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

async def handle_day_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏'''
    day = query.data.split("_")[1]
    
    if 'selected_days' not in context.user_data:
        context.user_data['selected_days'] = set()
    
    if day in context.user_data['selected_days']:
        context.user_data['selected_days'].remove(day)
    else:
        context.user_data['selected_days'].add(day)
    
    days_text = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    selected = [days_text[int(d)-1] for d in context.user_data['selected_days']]
    
    await query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {', '.join(selected) if selected else '–Ω–µ—Ç'}\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä:",
        reply_markup=get_weekdays_keyboard()
    )

async def handle_days_done_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏'''
    if not context.user_data.get('selected_days'):
        await query.message.edit_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_weekdays_keyboard()
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = sorted(list(context.user_data['selected_days']))
    context.user_data['days_of_week'] = ','.join(days)
    
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
    context.user_data['waiting_for'] = 'time'

async def handle_delete_callback(query, context):
    reminder_id = int(query.data.split("_")[1])
    delete_reminder(reminder_id)
    await query.message.edit_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

async def handle_cancel_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'''
    reminder_id = int(query.data.split("_")[1])
    reminder = get_reminder_by_id(reminder_id)
    
    if reminder:
        from .reminder_handlers import format_reminder_text
        reminder_text = format_reminder_text(reminder)
        await query.message.edit_text(
            reminder_text,
            reply_markup=get_reminder_management_keyboard(reminder_id, reminder[7])
        )
    else:
        await query.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    context.user_data.clear()

async def handle_page_callback(query, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü'''
    try:
        page = int(query.data.split('_')[1])
        reminders = context.user_data.get('current_reminders')
        
        if reminders:
            from .reminder_handlers import show_reminders_page
            await show_reminders_page(query, context, reminders, page, "")
    except (ValueError, IndexError) as e:
        logging.error(f"Error handling page callback: {e}")
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

async def handle_create_reminder_callback(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    action = query.data.split('_')[-1]
    
    if action == 'yes':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
        text = context.user_data.pop('temp_text', '')
        context.user_data['text'] = text
        context.user_data['waiting_for'] = 'time'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=get_reminder_type_keyboard()
        )
    else:
        # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        await query.message.delete()
        context.user_data.pop('temp_text', None)